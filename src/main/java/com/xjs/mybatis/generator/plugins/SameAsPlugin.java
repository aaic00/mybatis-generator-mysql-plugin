/**
 * Copyright 2006-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package com.xjs.mybatis.generator.plugins;

import java.util.Iterator;
import java.util.List;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.OutputUtilities;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;
import org.mybatis.generator.internal.util.JavaBeansUtil;

/**
 * This plugin adds equals() and hashCode() methods to the generated model classes. It demonstrates
 * the process of adding methods to generated classes
 * <p>
 * The <tt>equals</tt> method generated by this class is correct in most cases, but will probably
 * NOT be correct if you have specified a rootClass - because our equals method only checks the
 * fields it knows about.
 * <p>
 * Similarly, the <tt>hashCode</tt> method generated by this class only relies on fields it knows
 * about. Anything you add, or fields in a super class will not be factored into the hash code.
 *
 * @author Jeff Butler
 *
 */
public class SameAsPlugin extends PluginAdapter {


  /**
   * This plugin is always valid - no properties are required
   */
  @Override
  public boolean validate(final List<String> warnings) {
    return true;
  }

  @Override
  public boolean modelBaseRecordClassGenerated(final TopLevelClass topLevelClass,
      final IntrospectedTable introspectedTable) {
    List<IntrospectedColumn> columns;
    if (introspectedTable.getRules().generateRecordWithBLOBsClass()) {
      columns = introspectedTable.getNonBLOBColumns();
    } else {
      columns = introspectedTable.getAllColumns();
    }

    this.generateSameAs(topLevelClass, columns, introspectedTable);

    return true;
  }

  @Override
  public boolean modelPrimaryKeyClassGenerated(final TopLevelClass topLevelClass,
      final IntrospectedTable introspectedTable) {
    this.generateSameAs(topLevelClass, introspectedTable.getPrimaryKeyColumns(), introspectedTable);

    return true;
  }

  @Override
  public boolean modelRecordWithBLOBsClassGenerated(final TopLevelClass topLevelClass,
      final IntrospectedTable introspectedTable) {
    this.generateSameAs(topLevelClass, introspectedTable.getAllColumns(), introspectedTable);

    return true;
  }

  /**
   * Generates an <tt>sameAs</tt> method that does a comparison of all fields.
   * <p>
   * The generated <tt>sameAs</tt> method will be correct unless:
   * <ul>
   * <li>Other fields have been added to the generated classes</li>
   * <li>A <tt>rootClass</tt> is specified that holds state</li>
   * </ul>
   *
   * @param topLevelClass the class to which the method will be added
   * @param introspectedColumns column definitions of this class and any superclass of this class
   * @param introspectedTable the table corresponding to this class
   */
  protected void generateSameAs(final TopLevelClass topLevelClass, // NOSONAR
      final List<IntrospectedColumn> introspectedColumns,
      final IntrospectedTable introspectedTable) {

    final Method method = new Method();
    method.setVisibility(JavaVisibility.PUBLIC);
    method.setReturnType(FullyQualifiedJavaType.getBooleanPrimitiveInstance());
    method.setName("sameAs"); //$NON-NLS-1$
    method.addParameter(new Parameter(FullyQualifiedJavaType.getObjectInstance(), "that")); //$NON-NLS-1$

    this.context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);

    method.addBodyLine("if (this == that) {"); //$NON-NLS-1$
    method.addBodyLine("return true;"); //$NON-NLS-1$
    method.addBodyLine("}"); //$NON-NLS-1$

    method.addBodyLine("if (that == null) {"); //$NON-NLS-1$
    method.addBodyLine("return false;"); //$NON-NLS-1$
    method.addBodyLine("}"); //$NON-NLS-1$

    method.addBodyLine("if (getClass() != that.getClass()) {"); //$NON-NLS-1$
    method.addBodyLine("return false;"); //$NON-NLS-1$
    method.addBodyLine("}"); //$NON-NLS-1$

    final StringBuilder sb = new StringBuilder();
    sb.append(topLevelClass.getType().getShortName());
    sb.append(" other = ("); //$NON-NLS-1$
    sb.append(topLevelClass.getType().getShortName());
    sb.append(") that;"); //$NON-NLS-1$
    method.addBodyLine(sb.toString());
    sb.setLength(0);

    sb.append("return ");
    int columns = 0;
    final Iterator<IntrospectedColumn> iter = introspectedColumns.iterator();
    while (iter.hasNext()) {
      final IntrospectedColumn introspectedColumn = iter.next();

      if (introspectedColumn.isGeneratedAlways() || introspectedColumn.isIdentity()) {
        continue;
      }

      if (columns > 0) {
        OutputUtilities.javaIndent(sb, 1);
        sb.append("&& ");
      }

      final String getterMethod = JavaBeansUtil.getGetterMethodName(
          introspectedColumn.getJavaProperty(), introspectedColumn.getFullyQualifiedJavaType());

      if (introspectedColumn.getFullyQualifiedJavaType().isPrimitive()) {
        sb.append("(this."); //$NON-NLS-1$
        sb.append(getterMethod);
        sb.append("() == "); //$NON-NLS-1$
        sb.append("other."); //$NON-NLS-1$ // NOSONAR
        sb.append(getterMethod);
        sb.append("())"); //$NON-NLS-1$
      } else if (introspectedColumn.getFullyQualifiedJavaType().isArray()) {
        topLevelClass.addImportedType("java.util.Arrays"); //$NON-NLS-1$
        sb.append("Arrays.equals(this."); //$NON-NLS-1$
        sb.append(getterMethod);
        sb.append("(), "); //$NON-NLS-1$
        sb.append("other."); //$NON-NLS-1$
        sb.append(getterMethod);
        sb.append("())"); //$NON-NLS-1$
      } else {
        topLevelClass.addImportedType("java.util.Objects"); //$NON-NLS-1$
        sb.append("Objects.equals(this."); //$NON-NLS-1$
        sb.append(getterMethod);
        sb.append("(), "); //$NON-NLS-1$
        sb.append("other."); //$NON-NLS-1$
        sb.append(getterMethod);
        sb.append("())"); //$NON-NLS-1$
      }

      columns++;
      if (iter.hasNext()) {
        if (columns == 1) {
          sb.append(" // NOSONAR");
        }
        method.addBodyLine(sb.toString());
        sb.setLength(0);
      }
    }

    if (columns == 0) {
      sb.append(" true;");
    } else {
      sb.append(';');
    }
    method.addBodyLine(sb.toString());

    topLevelClass.addMethod(method);
  }

}
